from chromadb import PersistentClient
import openai
import os
from dotenv import load_dotenv
import time

# Load API Key t·ª´ file .env
load_dotenv()
openai_key = os.getenv("OPENAI_API_KEY")

# K·∫øt n·ªëi t·ªõi Chroma client
chroma_client = PersistentClient(path="../vectorstore/chroma")

# Truy c·∫≠p v√†o collection "sports_data"
collection = chroma_client.get_collection("sports_data")  # ƒê·∫£m b·∫£o "sports_data" l√† t√™n collection ƒë√∫ng

# C·∫≠p nh·∫≠t OpenAIEmbeddingFunction v·ªõi API key v√† m√¥ h√¨nh ph√π h·ª£p
openai.api_key = openai_key

# H√†m l·∫•y embedding t·ª´ OpenAI API
def get_embedding_from_openai(query):
    response = openai.embeddings.create(
        model="text-embedding-ada-002",  # model v·ªõi embedding k√≠ch th∆∞·ªõc 1536
        input=query
    )
    return response.data[0].embedding  # Truy c·∫≠p b·∫±ng thu·ªôc t√≠nh data

def normal_search(query, collection, top_k=10):
    # L·∫•y embedding c·ªßa query t·ª´ OpenAI
    query_embedding = get_embedding_from_openai(query)
    
    # T√¨m ki·∫øm trong collection v·ªõi embedding
    text_results = collection.query(query_embeddings=[query_embedding], n_results=top_k)
    return text_results

def hybrid_search_rerank(query, collection, top_k=10):
    # L·∫•y embedding c·ªßa query t·ª´ OpenAI
    query_embedding = get_embedding_from_openai(query)

    # T√¨m ki·∫øm embedding
    embed_results = collection.query(query_embeddings=[query_embedding], n_results=top_k)
    # T√¨m ki·∫øm text (n·∫øu c·∫ßn thi·∫øt, ƒë·∫£m b·∫£o text search y√™u c·∫ßu embedding t∆∞∆°ng t·ª±)
    text_results = collection.query(query_embeddings=[query_embedding], n_results=top_k)  # C·∫≠p nh·∫≠t text search th√†nh query_embeddings

    docs = embed_results['documents'][0] + text_results['documents'][0]
    ids = embed_results['ids'][0] + text_results['ids'][0]
    distances = embed_results['distances'][0] + text_results['distances'][0]

    # S·∫Øp x·∫øp theo kho·∫£ng c√°ch t·ª´ g·∫ßn nh·∫•t
    ranked = sorted(zip(ids, docs, distances), key=lambda x: x[2])

    seen = set()
    reranked_results = []
    for doc_id, doc, dist in ranked:
        if doc_id not in seen:
            seen.add(doc_id)
            reranked_results.append((doc_id, doc, dist))
        if len(reranked_results) >= top_k:
            break

    return reranked_results

# Test th·ªùi gian cho search b√¨nh th∆∞·ªùng
query = "Ai l√† ng∆∞·ªùi ghi nhi·ªÅu b√†n th·∫Øng nh·∫•t g·∫ßn ƒë√¢y"  # Thay c√¢u truy v·∫•n c·ªßa em v√†o ƒë√¢y

# B∆∞·ªõc 1: Test th·ªùi gian cho t√¨m ki·∫øm b√¨nh th∆∞·ªùng
start_time = time.time()
normal_results = normal_search(query, collection)
normal_search_time = time.time() - start_time
print(f"Th·ªùi gian t√¨m ki·∫øm b√¨nh th∆∞·ªùng: {normal_search_time:.4f} gi√¢y \n")
# In k·∫øt qu·∫£ t√¨m ki·∫øm b√¨nh th∆∞·ªùng
print("\nüîç K·∫øt qu·∫£ t√¨m ki·∫øm b√¨nh th∆∞·ªùng:")
for i, doc in enumerate(normal_results['documents'][0]):
    print(f"{i+1}. {doc}")

# B∆∞·ªõc 2: Test th·ªùi gian cho Hybrid Search + Reranking
start_time = time.time()
hybrid_results = hybrid_search_rerank(query, collection)
hybrid_search_time = time.time() - start_time
print(f"\nTh·ªùi gian t√¨m ki·∫øm v·ªõi Hybrid + Reranking: {hybrid_search_time:.4f} gi√¢y")
# In k·∫øt qu·∫£ t√¨m ki·∫øm Hybrid + Reranking
print("\nü§ñ K·∫øt qu·∫£ t√¨m ki·∫øm Hybrid + Reranking:")
for i, (doc_id, doc, dist) in enumerate(hybrid_results):
    print(f"{i+1}. {doc} (ID: {doc_id}, Distance: {dist:.4f})")